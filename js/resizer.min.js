(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ImageRGBA, typeIsArray;

typeIsArray = function(value) {
  return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
};

ImageRGBA = (function() {
  ImageRGBA.prototype.width = 0;

  ImageRGBA.prototype.height = 0;

  ImageRGBA.prototype.data = [];

  function ImageRGBA() {}

  ImageRGBA.prototype.initialize = function(width, height, data) {
    width = parseInt(width);
    height = parseInt(height);
    if (!typeIsArray(data)) {
      throw new Error('data should be an Array');
    }
    if (0 !== data.length % 4) {
      throw new Error('data should be an Array(4x)');
    }
    if (width * height * 4 !== data.length) {
      throw new Error('width,height should be matched with data');
    }
    this.width = width;
    this.height = height;
    this.data = data;
    return this;
  };

  ImageRGBA.prototype.pixcel = function(x, y, data) {
    var base;
    if (data == null) {
      data = null;
    }
    if (!(x < this.width && y < this.height)) {
      throw new Error("x and y should be in " + this.width + "x" + this.height);
    }
    base = y * this.width * 4 + x * 4;
    if (null !== data) {
      if (!typeIsArray(data)) {
        throw new Error('data should be an Array');
      }
      if (4 !== data.length) {
        throw new Error('data should be an Array(4)');
      }
      this.data[base] = data[0];
      this.data[base + 1] = data[1];
      this.data[base + 2] = data[2];
      this.data[base + 3] = data[3];
    }
    return [this.data[base++], this.data[base++], this.data[base++], this.data[base++]];
  };

  return ImageRGBA;

})();

module.exports = ImageRGBA;



},{}],2:[function(require,module,exports){
var ImageRGBA, Resizer;

ImageRGBA = require('../js/image-rgba.js');

Resizer = (function() {
  Resizer.prototype.before = null;

  function Resizer(before) {
    this.before = before;
  }

  Resizer.prototype.scale = function(width, height) {
    var scaleHeight, scaleWidth;
    scaleWidth = parseFloat(width / this.before.width);
    scaleHeight = parseFloat(height / this.before.height);
    if (scaleWidth > scaleHeight) {
      return scaleWidth;
    } else {
      return scaleHeight;
    }
  };

  Resizer.prototype.resize = function(width, height) {
    var after, scale, xAfter, xBefore, yAfter, yBefore, _i, _j, _ref, _ref1;
    scale = this.scale(width, height);
    width = parseInt(this.before.width * scale);
    height = parseInt(this.before.height * scale);
    after = new ImageRGBA();
    after.initialize(width, height, new Array(width * height * 4));
    for (yAfter = _i = 0, _ref = height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; yAfter = 0 <= _ref ? ++_i : --_i) {
      for (xAfter = _j = 0, _ref1 = width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; xAfter = 0 <= _ref1 ? ++_j : --_j) {
        xBefore = parseInt(Math.round(xAfter / scale));
        yBefore = parseInt(Math.round(yAfter / scale));
        if (!(xBefore < this.before.width)) {
          xBefore = this.before.width - 1;
        }
        if (!(yBefore < this.before.height)) {
          yBefore = this.before.height - 1;
        }
        after.pixcel(xAfter, yAfter, this.before.pixcel(xBefore, yBefore));
      }
    }
    return after;
  };

  return Resizer;

})();

module.exports = Resizer;



},{"../js/image-rgba.js":3}],3:[function(require,module,exports){
(function() {
  var ImageRGBA, typeIsArray;

  typeIsArray = function(value) {
    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
  };

  ImageRGBA = (function() {
    ImageRGBA.prototype.width = 0;

    ImageRGBA.prototype.height = 0;

    ImageRGBA.prototype.data = [];

    function ImageRGBA() {}

    ImageRGBA.prototype.initialize = function(width, height, data) {
      width = parseInt(width);
      height = parseInt(height);
      if (!typeIsArray(data)) {
        throw new Error('data should be an Array');
      }
      if (0 !== data.length % 4) {
        throw new Error('data should be an Array(4x)');
      }
      if (width * height * 4 !== data.length) {
        throw new Error('width,height should be matched with data');
      }
      this.width = width;
      this.height = height;
      this.data = data;
      return this;
    };

    ImageRGBA.prototype.pixcel = function(x, y, data) {
      var base;
      if (data == null) {
        data = null;
      }
      if (!(x < this.width && y < this.height)) {
        throw new Error("x and y should be in " + this.width + "x" + this.height);
      }
      base = y * this.width * 4 + x * 4;
      if (null !== data) {
        if (!typeIsArray(data)) {
          throw new Error('data should be an Array');
        }
        if (4 !== data.length) {
          throw new Error('data should be an Array(4)');
        }
        this.data[base] = data[0];
        this.data[base + 1] = data[1];
        this.data[base + 2] = data[2];
        this.data[base + 3] = data[3];
      }
      return [this.data[base++], this.data[base++], this.data[base++], this.data[base++]];
    };

    return ImageRGBA;

  })();

  module.exports = ImageRGBA;

}).call(this);

},{}]},{},[1,2]);
